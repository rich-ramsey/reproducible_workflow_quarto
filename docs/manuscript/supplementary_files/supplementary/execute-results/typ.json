{
  "hash": "0952f5dda987ffc1bd3d7782bd1d8ed5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Supplementary Materials\"\nsubtitle: \"A tutorial on setting up a reproducible workflow in R and R Studio with Quarto\"\nrunning-head: \"Reproducible workflow with Quarto\"\nauthor:\n  - name: Richard Ramsey\n    email: richard.ramsey@hest.ethz.ch\n    orcid: 0000-0002-0329-2112\n    url: https://www.rich.ramsey.com\n    corresponding: true\n    equal-contributor: true\n    affiliation:\n      - ref: 1\n  - name: Second Author\n    email: mail@example.com\n    orcid: \n    url: \n    equal-contributor: true\n    affiliation:\n      - ref: 2\n      - ref: 3\naffiliations:\n  - id: 1\n    name: ETH Zurich\n    department: Department of Health Sciences and Technology\n  - id: 2\n    name: Example Institution\n    department: Department of Examples\n  - id: 3\n    name: Example Second Institution\n    department: Department of Examples\nkeywords: [these are the key words]\nbibliography: ../references.bib\ncsl: ../apa.csl\nfunctions: [place, appendix]\nformat:\n  preprint-typst:\n    output-file: supplementary.pdf\n    fontsize: 11pt\n    mainfont: Libertinus Serif\n    section-numbering: \"A.\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n::: {.appendix}\n\n# Appendix A: Supplementary Materials {.appendix}\n\n## Model formulas\n\nThe regression formula for the full model (model b2):\n$rt \\sim 1 + stimulus * compatibility + \\ \n(1 + stimulus * compatibility | pid)$\n\n*Note:* rt = reaction time (ms); stimulus = blah; compatibility = blah; pid = subject/participant identifier.\n\n## A supplementary table \n\nHere, I just reproduce the table from the main manuscript to save time making anything else.\nBut of course in a real paper, you wouldn't do this, you'd just show whatever you needed.\nIt is labelled differently to reflect that it is a supplementary table (@tbl-s1).\n\n\n\n\n::: {#tbl-s1 .cell tbl-cap='Supplementary table created with `tinytable::tt()`'}\n::: {.cell-output-display}\n\n```{=typst}\n#show figure: set block(breakable: true)\n\n#let nhead = 1;\n#let nrow = 2;\n#let ncol = 4;\n\n  #let style-array = ( \n    // tinytable cell style after\n(pairs: ((0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2),), ),\n  )\n\n  // tinytable align-default-array before\n  #let align-default-array = ( left, left, left, left, ) // tinytable align-default-array here\n  #show table.cell: it => {\n    if style-array.len() == 0 {\n      it \n    } else {\n      let tmp = it\n      for style in style-array {\n        let m = style.pairs.find(k => k.at(0) == it.x and k.at(1) == it.y)\n        if m != none {\n          if (\"fontsize\" in style) { tmp = text(size: style.fontsize, tmp) }\n          if (\"color\" in style) { tmp = text(fill: style.color, tmp) }\n          if (\"indent\" in style) { tmp = pad(left: style.indent, tmp) }\n          if (\"underline\" in style) { tmp = underline(tmp) }\n          if (\"italic\" in style) { tmp = emph(tmp) }\n          if (\"bold\" in style) { tmp = strong(tmp) }\n          if (\"mono\" in style) { tmp = math.mono(tmp) }\n          if (\"strikeout\" in style) { tmp = strike(tmp) }\n        }\n      }\n      tmp\n    }\n  }\n\n  #align(center, [\n\n  #table( // tinytable table start\n    columns: (auto, auto, auto, auto),\n    stroke: none,\n    align: (x, y) => {\n      let sarray = style-array.filter(a => \"align\" in a)\n      let sarray = sarray.filter(a => a.pairs.find(p => p.at(0) == x and p.at(1) == y) != none)\n      if sarray.len() > 0 {\n        sarray.last().align\n      } else {\n        left\n      }\n    },\n    fill: (x, y) => {\n      let sarray = style-array.filter(a => \"background\" in a)\n      let sarray = sarray.filter(a => a.pairs.find(p => p.at(0) == x and p.at(1) == y) != none)\n      if sarray.len() > 0 {\n        sarray.last().background\n      }\n    },\n table.hline(y: 1, start: 0, end: 4, stroke: 0.05em + black),\n table.hline(y: 3, start: 0, end: 4, stroke: 0.1em + black),\n table.hline(y: 0, start: 0, end: 4, stroke: 0.1em + black),\n    // tinytable lines before\n\n    table.header(\n      repeat: true,\n[term], [value], [.lower], [.upper],\n    ),\n\n    // tinytable cell content after\n[intercept], [613.9], [593.62], [635],\n[stimulus], [6.4], [0.77], [12],\n\n    // tinytable footer after\n\n    table.footer(\n      repeat: false,\n      // tinytable notes after\n    table.cell(align: left, colspan: 4, text([Note. This is a footnote.])),\n    ),\n    \n\n  ) // end table\n\n  ]) // end align\n```\n\n:::\n:::\n\n\n## A supplementary figure \n\nLet's take a look at the mixing of chains in the model.\nThis is a useful model diagnostic check to see that the model built ok (@fig-s1).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Caterpillar plots showing the mixing of chains across parameters in model b2.](../../exp1/figures/b2_chains.jpeg){#fig-s1}\n:::\n:::\n\n\n:::",
    "supporting": [
      "supplementary_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}